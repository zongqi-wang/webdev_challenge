{"version":3,"sources":["components/Button.js","components/Movies.js","components/Navbar.js","components/Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["Button","movie","text","onClick","className","Moviecards","props","info","src","Poster","alt","Title","Year","Movies","movies","onAdd","map","imdbID","Navbar","searchSubmit","handleQuery","action","onSubmit","bind","this","type","id","placeholder","autoComplete","onChange","Nominations","nominations","onDel","noms","nomination","App","useEffect","document","title","useState","searchQuery","query","updateQuery","setMovies","e","a","preventDefault","url","fetch","res","json","data","target","reset","Response","results","Search","ids","Set","i","length","has","splice","add","alert","setNom","banner","getElementById","classList","remove","value","exist","filter","nom","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iWAkBeA,EAdA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC7B,OACE,wBAAQA,QAAS,kBAAMA,EAAQF,IAAQG,UAAU,MAAjD,SACGF,KCaDG,EAAa,SAACC,GAClB,IAAMC,EAAOD,EAAML,MAEnB,OACE,sBAAKG,UAAU,aAAf,UACE,qBAAKI,IAAKD,EAAKE,OAAQC,IAAI,iBAC3B,oBAAIN,UAAU,QAAd,SAAuBG,EAAKI,QAC5B,oBAAIP,UAAU,OAAd,SAAsBG,EAAKK,OAC3B,cAAC,EAAD,CAAQX,MAAOM,EAAML,KAAK,WAAWC,QAASG,EAAMH,cAK3CU,EA7BA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACxB,OACE,sBAAKX,UAAU,cAAf,UACE,gDAECU,EAAOE,KAAI,SAACf,GAAD,OACV,cAAC,EAAD,CAEEA,MAAOA,EACPE,QAASY,GAFJd,EAAMgB,e,MCeNC,MAxBf,YAAgD,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,YAC9B,OACE,8BACE,sBAAKhB,UAAU,SAAf,UACE,oBAAIA,UAAU,eAAd,0BACA,sBACEA,UAAU,aACViB,OAAO,GACPC,SAAUH,EAAaI,KAAKC,MAH9B,SAKE,uBACEC,KAAK,OACLC,GAAG,SACHtB,UAAU,aACVuB,YAAY,0BACZC,aAAa,MACbC,SAAUT,YCIPU,G,MAlBK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC5BC,EAAOF,EAEb,OACE,sBAAK3B,UAAU,cAAf,UACE,kDACA,6BACG6B,EAAKjB,KAAI,SAACkB,GAAD,OACR,qBAAI9B,UAAU,MAAd,UACE,4BAAI8B,EAAWvB,QACf,cAAC,EAAD,CAAQT,KAAK,IAAIC,QAAS6B,EAAO/B,MAAOiC,MAFjBA,EAAWjB,kBCsG/BkB,MA5Gf,WACEC,qBAAU,WACRC,SAASC,MAAQ,iBAChB,IAGH,MAA6BC,mBAAS,CAAEC,YAAa,KAArD,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAA4BH,mBAAS,IAArC,mBAAOzB,EAAP,KAAe6B,EAAf,KATa,4CAkBb,WAAyBC,GAAzB,2BAAAC,EAAA,6DACED,EAAEE,iBAEIR,EAAQG,EAAMD,YAChBO,EAJN,qCAI0CT,EAJ1C,wCAKoBU,MAAMD,GAL1B,cAKQE,EALR,gBAMqBA,EAAIC,OANzB,OAYE,GANMC,EANR,OAQEP,EAAEQ,OAAOC,QACTX,EAAY,CAAEF,YAAa,KAGL,SAAlBW,EAAKG,SAAqB,CAM5B,IALMC,EAAUJ,EAAKK,OAIfC,EAAM,IAAIC,IACPC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAC7BF,EAAII,IAAIN,EAAQI,GAAR,QAGXJ,EAAQO,OAAOH,EAAG,GAFlBF,EAAIM,IAAIR,EAAQI,GAAR,QAKZhB,EAAUY,QAEVS,MAAM,kDA3BV,6CAlBa,sBAkDb,MAA8BzB,mBAAS,IAAvC,mBAAOR,EAAP,KAAoBkC,EAApB,KA2BA,OATA7B,qBAAU,WACR,IAAM8B,EAAS7B,SAAS8B,eAAe,UACnCpC,EAAY6B,QAAU,EACxBM,EAAOE,UAAUC,OAAO,UAExBH,EAAOE,UAAUL,IAAI,YAEtB,CAAChC,IAGF,sBAAK3B,UAAU,UAAf,UACE,cAAC,EAAD,CAAQe,aA/EC,4CA+EwBC,YApEjB,SAACwB,GACnBF,EAAY,CACVF,YAAaI,EAAEQ,OAAOkB,WAmEtB,qBAAK5C,GAAG,SAAStB,UAAU,SAA3B,SACE,gDAAmB2B,EAAY6B,OAA/B,qBAEF,+BACE,sBAAKxD,UAAU,YAAf,UACE,cAAC,EAAD,CAAQU,OAAQA,EAAQC,MAjCjB,SAACd,GAEd,IADA,IAAIsE,GAAQ,EACHZ,EAAI,EAAGA,EAAI5B,EAAY6B,OAAQD,IACtC,GAAI5B,EAAY4B,GAAZ,SAA6B1D,EAAK,OAAY,CAChDsE,GAAQ,EACR,MAGCA,GAAON,EAAO,GAAD,mBAAKlC,GAAL,CAAkB9B,QA0B9B,cAAC,EAAD,CAAa8B,YAAaA,EAAaC,MAvBhC,SAAC/B,GACdgE,EAAOlC,EAAYyC,QAAO,SAACC,GAAD,OAASA,EAAG,SAAexE,EAAK,mBAyBxD,iCACE,+BACE,+BACE,mBAAGyE,KAAK,mDAAR,gCAEK,OAEP,mCACA,+BACE,mBAAGA,KAAK,yBAAR,wBAAgD,OAElD,mCACA,gEC/FKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjD,SAAS8B,eAAe,SAM1BQ,M","file":"static/js/main.351efd28.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./button.css\";\n\nconst Button = ({ movie, text, onClick }) => {\n  return (\n    <button onClick={() => onClick(movie)} className=\"btn\">\n      {text}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  movie: PropTypes.object,\n  text: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","// import Moviecards from \"./Moviecards\";\nimport \"./Movies.css\";\nimport Button from \"./Button.js\";\n\nconst Movies = ({ movies, onAdd }) => {\n  return (\n    <div className=\"movie-panel\">\n      <h1>Search Results</h1>\n\n      {movies.map((movie) => (\n        <Moviecards\n          key={movie.imdbID}\n          movie={movie}\n          onClick={onAdd}\n        ></Moviecards>\n      ))}\n    </div>\n  );\n};\n\nconst Moviecards = (props) => {\n  const info = props.movie;\n\n  return (\n    <div className=\"movie-card\">\n      <img src={info.Poster} alt=\"movie poster\"></img>\n      <h3 className=\"title\">{info.Title}</h3>\n      <h4 className=\"year\">{info.Year}</h4>\n      <Button movie={info} text=\"Nominate\" onClick={props.onClick}></Button>\n    </div>\n  );\n};\n\nexport default Movies;\n","import \"./navbar.css\";\n\nfunction Navbar({ searchSubmit, handleQuery }) {\n  return (\n    <nav>\n      <div className=\"navbar\">\n        <h1 className=\"navbar-title\">The Shoppies</h1>\n        <form\n          className=\"search-bar\"\n          action=\"\"\n          onSubmit={searchSubmit.bind(this)}\n        >\n          <input\n            type=\"text\"\n            id=\"search\"\n            className=\"search-box\"\n            placeholder=\"Search Movies by Titles\"\n            autoComplete=\"off\"\n            onChange={handleQuery}\n          />\n        </form>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./nominations.css\";\nimport Button from \"./Button.js\";\n\nconst Nominations = ({ nominations, onDel }) => {\n  const noms = nominations;\n\n  return (\n    <div className=\"Nominations\">\n      <h1>Your Nominations</h1>\n      <ul>\n        {noms.map((nomination) => (\n          <li className=\"nom\" key={nomination.imdbID}>\n            <p>{nomination.Title}</p>\n            <Button text=\"X\" onClick={onDel} movie={nomination} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Nominations;\n","import \"./App.css\";\nimport Movies from \"./components/Movies\";\nimport Navbar from \"./components/Navbar\";\nimport Nominations from \"./components/Nominations\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  useEffect(() => {\n    document.title = \"The Shoppies\";\n  }, []);\n\n  //state for movie query\n  const [query, updateQuery] = useState({ searchQuery: \"\" });\n\n  //state for movies on display\n  const [movies, setMovies] = useState([]);\n  //update state from search bar\n  const handleQuery = (e) => {\n    updateQuery({\n      searchQuery: e.target.value,\n    });\n  };\n\n  //get movies from search fields using API\n  async function getMoveis(e) {\n    e.preventDefault();\n    //use URL to get movies\n    const title = query.searchQuery;\n    let url = `https://www.omdbapi.com/?s=${title}&type=movie&apikey=1d2f8dca`;\n    const res = await fetch(url);\n    const data = await res.json();\n    //reset fields\n    e.target.reset();\n    updateQuery({ searchQuery: \"\" });\n\n    //getting correct data\n    if (data.Response === \"True\") {\n      const results = data.Search;\n\n      //look for unique items for corner case such as\n      //searching 'hello' produces duplicates\n      const ids = new Set();\n      for (var i = 0; i < results.length; i++) {\n        if (!ids.has(results[i][\"imdbID\"])) {\n          ids.add(results[i][\"imdbID\"]);\n        } else {\n          results.splice(i, 1);\n        }\n      }\n      setMovies(results);\n    } else {\n      alert(\"Too many results. Please enter a longer input.\");\n    }\n  }\n\n  // Nominations\n  const [nominations, setNom] = useState([]);\n  // nominating movies\n  const addNom = (movie) => {\n    let exist = false;\n    for (let i = 0; i < nominations.length; i++) {\n      if (nominations[i][\"imdbID\"] === movie[\"imdbID\"]) {\n        exist = true;\n        break;\n      }\n    }\n    if (!exist) setNom([...nominations, movie]);\n  };\n\n  const delNom = (movie) => {\n    setNom(nominations.filter((nom) => nom[\"imdbID\"] !== movie[\"imdbID\"]));\n  };\n\n  //nomination banner\n  useEffect(() => {\n    const banner = document.getElementById(\"banner\");\n    if (nominations.length >= 5) {\n      banner.classList.remove(\"hidden\");\n    } else {\n      banner.classList.add(\"hidden\");\n    }\n  }, [nominations]);\n\n  return (\n    <div className=\"wrapper\">\n      <Navbar searchSubmit={getMoveis} handleQuery={handleQuery} />\n      <div id=\"banner\" className=\"hidden\">\n        <p>You have added {nominations.length} nominations!</p>\n      </div>\n      <main>\n        <div className=\"container\">\n          <Movies movies={movies} onAdd={addNom} />\n          <Nominations nominations={nominations} onDel={delNom} />\n        </div>\n      </main>\n      <footer>\n        <ul>\n          <li>\n            <a href=\"https://github.com/zongqi-wang/webdev_challenge/\">\n              Check out the code\n            </a>{\" \"}\n          </li>\n          <li>|</li>\n          <li>\n            <a href=\"https://wangzongqi.com\">My Website</a>{\" \"}\n          </li>\n          <li>|</li>\n          <li>&#169; Zongqi Wang 2021</li>\n        </ul>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}